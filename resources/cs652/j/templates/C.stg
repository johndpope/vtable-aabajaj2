CFile(f, classes, main) ::= <<
#include \<stdio.h>
#include \<stdlib.h>

typedef struct {
    char *name;
    int size;
    void (*(*_vtable)[])();
} metadata;

typedef struct {
    metadata *clazz;
} object;

object *alloc(metadata *clazz) {
    object *p = calloc(1, clazz->size); // wipe to 0s
    p->clazz = clazz;
    return p;
}

<classes>

<main>
>>

ClassDef(class, fields, methods, vtable) ::= <<
// D e f i n e  C l a s s  <class.name>
typedef struct {
    metadata *clazz;
    <fields :{ field | <field>;}; separator = "\n">
} <class.name>;

<vtable :{ v |#define <class.name>_<v.f.methodName>_SLOT <v.f.slotNumber>}; separator = "\n">

<methods>

void (*<class.name>_vtable[])() = {
    <vtable :{ f | (void (*)())&<f> }; separator = ", ">
};

metadata <class.name>_metadata = {"<class.clazz.name>", sizeof(<class.name>), &<class.name>_vtable};

>>

MethodDef(m,funcName,returnType,args,body) ::= <<
<returnType> <funcName> (<args :{ arg | <arg> }; separator = ", ">)
{
<body>
}

>>

MainMethod(main,funcName,returnType,args,body) ::= <<
int main(int argc, char *argv[]){
    <body>
    return 0;
}
>>

Block(block, locals, instrs) ::= <<
<locals :{ local | <local>;}; separator = "\n">
<instrs>
>>

VarDef(var, type)   ::= <<
<type> <var.id>
>>

FuncName(f)         ::= "<f.className>_<f.methodName>"

ObjectTypeSpec(o)   ::= "<o.type> *"
PrimitiveTypeSpec(p)::= "<p.type>"

AssignStat(a,left,right) ::= <<
<left> = <right>;
>>
PrintStringStat(p)  ::= <<
printf(<p.print>);
>>
PrintStat(p,args)   ::= <<
printf(<p.print>, <args :{ arg | <arg> }; separator = ", ">);
>>
CallStat(c,call)    ::= "<call>;"
CtorCall(ctor)      ::= "alloc(&<ctor.name>_metadata)"
ReturnStat(r,expr)  ::= "return <expr>;"
WhileStat(w,condition, stat) ::= <<
while<w.condition> <w.stat>
>>
IfStat(i,condition, stat) ::= <<
if<i.condition> <stat>
>>
IfElseStat(i,condition, stat, elseStat) ::= <<
if<i.condition> <stat>
else <elseStat>
>>

NullRef(n)          ::= "NULL"

LiteralRef(lit)     ::= "<lit.id>"
VarRef(v)           ::= "<v.id>"
FieldRef(f, object) ::= "<object>-><f.fieldName>"
ThisRef(t)          ::= "this"
MethodCall(m, receiver, receiverType, fptrType, args) ::= <<
<fptrType> (*(<receiver>)->clazz->_vtable)[<m.className>_<m.name>_SLOT])(((<m.receiverType> *)<receiver>)<args :{ arg | ,<arg> }>)
>>

FuncPtrType(f, returnType, argTypes) ::= <<(*(<returnType>(*)(<argTypes :{ arg | <arg> }; separator = ", ">))>>
TypeCast(cast, type, expr) ::= "((<type>)<expr>)"